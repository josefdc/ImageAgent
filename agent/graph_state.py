"""
LangGraph Agent State Schema

This module defines the state structure (schema) for the LangGraph agent workflow.
It contains the TypedDict classes that specify what data flows through the graph nodes:

- AgentState: Main state containing conversation history, tool requests, and UI updates
- ToolInvocationRequest: Specific structure for tool execution requests

The state is designed to avoid serialization issues by not storing large objects like images,
instead relying on external state management for image data.
"""

# --- Standard Library Imports ---
from typing import List, Optional, Dict, Any, Annotated
from typing_extensions import TypedDict

# --- Third-Party Imports ---
from langchain_core.messages import BaseMessage
from langgraph.graph.message import add_messages


# --- Tool Invocation State ---
# Represents the details of a tool call requested by the LLM
class ToolInvocationRequest(TypedDict, total=False):
    """
    Represents the details of a tool call requested by the LLM.
    
    Attributes:
        tool_call_id: Unique ID generated by the LLM for this call
        tool_name: Name of the tool requested for execution
        tool_args: Arguments to pass to the tool function
    """
    tool_call_id: Optional[str]
    tool_name: Optional[str]
    tool_args: Optional[Dict[str, Any]]


# --- Main Agent State ---
# This dictionary defines all the pieces of information that flow through the graph nodes.
class AgentState(TypedDict):
    """
    Main state managed by the LangGraph agent workflow.
    
    This state flows through all graph nodes and contains:
    - Conversation history between user and agent
    - Pending tool execution requests
    - UI updates that need to be applied to the interface
    
    Note: Does not store image objects directly to avoid serialization issues.
    Images are managed through external session state.
    
    Attributes:
        messages: Conversation history using LangGraph's add_messages reducer
        tool_invocation_request: Pending tool call to be executed
        pending_ui_updates: UI widget state changes to be applied
    """
    messages: Annotated[List[BaseMessage], add_messages]
    tool_invocation_request: Optional[ToolInvocationRequest]
    pending_ui_updates: Optional[Dict[str, Any]]