# streamlit_image_editor/agent/graph_state.py
# Defines the state structure (schema) for the LangGraph agent workflow.

# --- Standard Library Imports ---
from typing import List, Optional, Tuple, Dict, Any, Annotated
from typing_extensions import TypedDict

# --- Third-Party Imports ---
from langchain_core.messages import BaseMessage
from langgraph.graph.message import add_messages # Reducer for messages list
# from PIL import Image # No longer needed here
import operator # For potential future reducers

# --- Tool Invocation State ---
# Represents the details of a tool call requested by the LLM
class ToolInvocationRequest(TypedDict, total=False):
    """Holds the details needed to execute a specific tool call."""
    tool_call_id: Optional[str]  # The unique ID generated by the LLM for this call
    tool_name: Optional[str]     # The name of the tool requested
    tool_args: Optional[Dict[str, Any]] # The arguments for the tool

# --- Main Agent State ---
# This dictionary defines all the pieces of information that flow through the graph nodes.
class AgentState(TypedDict):
    """
    The overall state managed by the LangGraph agent.
    Includes conversation history and pending actions/updates.
    Does NOT store the full image object to avoid serialization issues.
    """

    # 1. Conversation History:
    # Uses LangGraph's built-in 'add_messages' reducer which appends new messages
    # to the list automatically when a node returns {"messages": [new_msg]}.
    messages: Annotated[List[BaseMessage], add_messages]

    # 2. Pending Tool Request:
    # Set by the 'prepare_tool_run' node based on LLM output.
    # Consumed and cleared by the 'execute_tool' node.
    tool_invocation_request: Optional[ToolInvocationRequest]

    # --- updated_image REMOVED ---
    # The updated image is now handled directly by the tool implementation
    # calling state.session_state_manager.update_processed_image

    # 3. Pending UI Updates: (Renumbered from 4)
    # Set by the 'execute_tool' node if the tool requires UI widget state changes.
    # Consumed and cleared by the 'update_app_state' node.
    # Stored as a dictionary: {'widget_key': new_value}
    pending_ui_updates: Optional[Dict[str, Any]]

    # --- Potentially add other state fields if needed ---
    # e.g., user_id, specific flags, intermediate calculation results, etc.
    # user_id: Optional[str]
    # requires_clarification: bool = False